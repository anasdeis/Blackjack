library ieee;
use ieee.std_logic_1164.all;


entity g09_human_player_fsm is
port ( 							 
	Reset, clock, Hit, Stop, legal_play, new_round																							: in std_logic;
	Hit_en, Stop_en, Turn, Done, compare_5_en, init, compare_wins_en, games_played_en, games_won_en, game_over	: out std_logic);
	
end g09_human_player_fsm;
	
architecture behavioural of g09_human_player_fsm is

	type state_type is (A,B,C,D,E,F);
	signal y_present,y_next	: state_type;
	
begin

	process1: process(Reset, Hit, Stop, legal_play, new_round, y_present, y_next)
	begin  
	
	if new_round = '1' then
		y_next = C;
	end if;
		
			case y_present is 
				when A => 
					if Reset = '0' then 
						y_next <= B;
					else 
						y_next <= A;
					end if;
					
				when B => 
					if Reset = '1' then 
						y_next <= C;
					else 
						y_next <= B;
					end if;
				
				when C => 
						y_next <= D;
							
				when D => 
							y_next <= E;
						
				when E => 
						if Hit = '1' then
							y_next <= F;
						elsif sel_button = '1' then
							y_next <= G;
						elsif Stop = '1' then
							y_next <= H;
						else
							y_next <= E;
						end if;
						
				when F =>
						if legal_play = '1' then
							y_next <= E;
						else
							y_next <= J;
						
				when G =>
						if legal_play = '1' then
							y_next <= E;
						else
							y_next <= J;
							
				when H => 
				
				when J => 
						if rounds_eq_5 = '1' then
							y_next <= K;
						else 
							y_next <= C;
						end if;
				
				when K => 
						if playergdealer_wins = '1' then
							y_next <= L;
						else
							y_next <= M;
						end if;
						
				when L => 
							y_next <= C;
							
				when M =>
							y_next <= C;
							
				when others =>
						y_next <= A;
						
			end case;
		end process;
		
	process2: process (clock, Reset)
	begin
		if reset = '1' then
			y_present <= A;
		elsif (clock'event and clock = '1') then 
			y_present <= y_next;
		end if;
	end process;
						
	compare_5_en <= '1' when y_present = J
		else '0';
	init <= '1' when y_present = K
		else '0';
	compare_wins_en <= '1' when y_present = K
		else '0';
	games_played_en <= '1' when y_present = K
		else '0';
	games_won_en <= '1' when y_present = L
		else '0';
	game_over <= '1' when y_present = M
		else '0';
				
end behavioural;